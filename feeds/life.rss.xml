<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Shangfute's Blog</title><link>http://shangfute.github.com/</link><description>Cryptography &amp; Program Anaylsis</description><lastBuildDate>Thu, 12 May 2016 22:11:03 +0800</lastBuildDate><item><title>Have Fun With Cryptography</title><link>http://shangfute.github.com/why-encrypt.html</link><description>&lt;p&gt;今天刚刚在 github 上创建了主页，一共才三篇文章，就有一篇是加密的，遭到朋友们的抱怨。其实文章仅仅是一些没有整理好的思想罢了，但是为了测试一下加密功能，因此才加密了一下。另外，这个网站的主题就是密码学，因此我十分乐意让这个主题更突出一些。&lt;/p&gt;
&lt;p&gt;密码学太有用了，我不想只从理论研究的角度学习密码学，更想将其应用到实践中去。我希望能够实现下面几个应用。&lt;/p&gt;
&lt;h2&gt;加密评论&lt;/h2&gt;
&lt;p&gt;现在云计算越来越普及，网络应用都以网站的形式存在与云服务器上，客户端通常就是一个浏览器。大公司还可以构建自己的云，但许多小型组织和个人还是在租用公有云。因此数据存储在别人的计算机上。一方面难以保证这些数据的完整性，不被恶意修改。另一方面，难以保证这些数据不被用作它途，被恶意数据挖掘等等。&lt;/p&gt;
&lt;p&gt;比如现在这个站点的评论功能使用了多说社会化评论，评论的数据以明文的形式存储在多说的服务器上。难以确保这些数据是怎样处理的，它们有没有被修改。这些都无法保证。&lt;/p&gt;
&lt;p&gt;怎么解决这个问题呢，密码学可以帮助我们。我们在客户端对数据进行加密后保存到多说的服务器，那么就难以被识别处来了。但是这样存在严重的问题，如何保证大家都能正常的读取评论呢。必须知道密钥才能解密出正常的明文，因此大家都需要知道密钥，但是多说系统不能知道密钥。&lt;/p&gt;
&lt;p&gt;那么，我们需要提供一个大家通过浏览器都能读取，但是多说系统不能或者难以读取的密钥。&lt;/p&gt;
&lt;h2&gt;一次性信息&lt;/h2&gt;
&lt;p&gt;代码混淆执行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 22:11:03 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-12:why-encrypt.html</guid><category>web</category><category>crypto</category><category>cloud</category></item><item><title>[Encrypted] Think flow</title><link>http://shangfute.github.com/think-flow.html</link><description>&lt;div id="pec-encrypted-content" style="display:none"&gt;AFQOdU09llo8YnGsj+AAOQ==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-12:think-flow.html</guid><category>thought</category><category>daily</category></item></channel></rss>