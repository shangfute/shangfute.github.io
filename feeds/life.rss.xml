<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Shangfute's Blog</title><link>http://localhost:8000/</link><description>Cryptography &amp; Program Anaylsis</description><lastBuildDate>Thu, 12 May 2016 22:11:03 +0800</lastBuildDate><item><title>Have Fun With Cryptography</title><link>http://localhost:8000/why-encrypt.html</link><description>&lt;p&gt;今天刚刚在 github 上创建了主页，一共才三篇文章，就有一篇是加密的，遭到朋友们的抱怨。其实文章仅仅是一些没有整理好的思想罢了，但是为了测试一下加密功能，因此才加密了一下。另外，这个网站的主题就是密码学，因此我十分乐意让这个主题更突出一些。&lt;/p&gt;
&lt;p&gt;密码学太有用了，我不想只从理论研究的角度学习密码学，更想将其应用到实践中去。我希望能够实现下面几个应用。&lt;/p&gt;
&lt;h2&gt;加密评论&lt;/h2&gt;
&lt;p&gt;现在云计算越来越普及，网络应用都以网站的形式存在与云服务器上，客户端通常就是一个浏览器。大公司还可以构建自己的云，但许多小型组织和个人还是在租用公有云。因此数据存储在别人的计算机上。一方面难以保证这些数据的完整性，不被恶意修改。另一方面，难以保证这些数据不被用作它途，被恶意数据挖掘等等。&lt;/p&gt;
&lt;p&gt;比如现在这个站点的评论功能使用了多说社会化评论，评论的数据以明文的形式存储在多说的服务器上。难以确保这些数据是怎样处理的，它们有没有被修改。这些都无法保证。&lt;/p&gt;
&lt;p&gt;怎么解决这个问题呢，密码学可以帮助我们。我们在客户端对数据进行加密后保存到多说的服务器，那么就难以被识别处来了。但是这样存在严重的问题，如何保证大家都能正常的读取评论呢。必须知道密钥才能解密出正常的明文，因此大家都需要知道密钥，但是多说系统不能知道密钥。&lt;/p&gt;
&lt;p&gt;那么，我们需要提供一个大家通过浏览器都能读取，但是多说系统不能或者难以读取的密钥。&lt;/p&gt;
&lt;h2&gt;一次性信息&lt;/h2&gt;
&lt;p&gt;代码混淆执行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 22:11:03 +0800</pubDate><guid isPermaLink="false">tag:localhost:8000,2016-05-12:why-encrypt.html</guid><category>web</category><category>crypto</category><category>cloud</category></item><item><title>[Encrypted] Think flow</title><link>http://localhost:8000/think-flow.html</link><description>&lt;div id="pec-encrypted-content" style="display:none"&gt;zPmDtdlA/W61WzF97ot2BA==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:localhost:8000,2016-05-12:think-flow.html</guid><category>thought</category><category>daily</category></item></channel></rss>