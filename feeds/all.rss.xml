<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Shangfute's Blog</title><link>http://shangfute.github.com/</link><description>Cyber-Physical Systems &amp; Formal Methods</description><lastBuildDate>Mon, 27 Nov 2017 19:29:33 +0800</lastBuildDate><item><title>劫持栈指针</title><link>http://shangfute.github.com/Stack-pivot.html</link><description>&lt;p&gt;劫持栈指针（Stack pivot）就是改写rsp(esp)，使其指向其他位置。这样栈也就被劫持到攻击者控制的内存上去，然后在该位置做ROP。&lt;/p&gt;
&lt;h2&gt;为什么要劫持栈指针？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以控制的栈溢出的字节比较少，难以构造较长的ROP链，无法直接利用溢出字节进行ROP&lt;/li&gt;
&lt;li&gt;开启了PIE保护，栈地址未知，并且无法泄露，但是利用某些技术（如ret2dl-resolve）时，必须知道栈地址，可以通过stack pivot将栈劫持到相应的区域&lt;/li&gt;
&lt;li&gt;其它漏洞难以利用，stack pivot 能够将一些非栈溢出的漏洞，变成栈溢出的漏洞，例如，将程序劫持到堆空间中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;利用条件&lt;/h2&gt;
&lt;p&gt;如果在尝试了直接Rop发现比较难实现，并且程序中有可以利用进行读写的函数，就可以考虑stack pivot stack pivot&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以控制程序执行流&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在地址已知，内容可控的Buffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSS，由于进程按页分配内存，分配给bss段的内存大小至少一个页(4k,0x1000)大小。然而一般bss段的内容用不了这么多的空间，并且bss段分配的内存页拥有读写权限&lt;/li&gt;
&lt;li&gt;堆，但是需要我们能够泄露堆地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以控制sp指针。一般来说 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Mon, 27 Nov 2017 19:29:33 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-11-27:/Stack-pivot.html</guid><category>learn</category><category>ROP</category></item><item><title>无人机安全形式化分析</title><link>http://shangfute.github.com/UAV-security-formal-analysis.html</link><description>&lt;p&gt;首先，精确定义UAV系统安全。针对通用UAV系统，识别出一组相对完全的安全属性，并且提供统一的格式。安全属性有两部分组成：攻击行为和想要的安全属性。 然后，分析UAV系统是否安全。根据一组安全属性自动生成攻击行为，使用可达性和LTL属性对安全属性建模。&lt;/p&gt;
&lt;p&gt;收集UAV系统潜在的攻击方式。通过分析攻击的关联，识别原子攻击行为，使得所有攻击都是原子攻击的组合。利用攻击树形式化表示原子攻击的所有组合，构成全部可能的攻击。&lt;/p&gt;
&lt;p&gt;提出从安全属性，自动生成攻击树的算法。然后根据攻击树生成攻击模型，并将每种攻击模型关联到相应的安全属性中。&lt;/p&gt;
&lt;p&gt;每种攻击使用形式化语言CSP＃建模，每种安全属性形式化为可达性或暂态属性。根据系统模型、攻击模型和需要的安全属性，可以通过模型检查工具PAT验证系统在某种攻击下，是否满足安全属性。&lt;/p&gt;
&lt;h2&gt;创新点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;识别出相对完整的UAV系统的安全属性集合，考虑到了各种UAV系统中的子系统。 &lt;/li&gt;
&lt;li&gt;提出自动根据安全属性生成攻击树的算法，然后自动生成攻击模型。 &lt;/li&gt;
&lt;li&gt;验证系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;安全需求识别&lt;/h2&gt;
&lt;p&gt;首先，识别UAV组件。UAV、地面站、飞行员、通信信道&lt;/p&gt;
&lt;p&gt;对每个组件，识别 1. 安全保证 2. 攻击行为。&lt;/p&gt;
&lt;p&gt;攻击行为之间可能存在关联：两个攻击结果相同、一个攻击依赖于另一个攻击 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Tue, 07 Nov 2017 19:29:33 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-11-07:/UAV-security-formal-analysis.html</guid></item><item><title>概率程序分析</title><link>http://shangfute.github.com/probablistic-program-analysis.html</link><description>&lt;p&gt;研究对不确定性变量进行计算的程序。&lt;/p&gt;
&lt;h2&gt;研究目标&lt;/h2&gt;
&lt;p&gt;开发静态和动态分析技术，能够将概率程序看成随机过程进行推理。&lt;/p&gt;
&lt;h2&gt;应用领域&lt;/h2&gt;
&lt;p&gt;分析机器学习中使用的模型：当输入存在噪声时，分类器性能如何变化。&lt;/p&gt;
&lt;p&gt;分析随机化计算：系统化建立随机算法的属性。&lt;/p&gt;
&lt;p&gt;分析传感器数据融合算法：对融合算法进行推理。&lt;/p&gt;
&lt;h2&gt;主要关注的问题&lt;/h2&gt;
&lt;p&gt;随机化安全性：给定概率程序P和状态集合U，在N步内程序执行到U的概率是多少。&lt;/p&gt;
&lt;p&gt;时序逻辑属性：研究以1的概率成立的时序逻辑属性，包括，几乎确定终止（程序以1的概率终止），几乎确定常返（程序无限次访问某个状态集合），几乎确定持续（程序执行到某个状态集合，并永远留在集合内），以及整改暂态属性体系。&lt;/p&gt;
&lt;h2&gt;研究途径&lt;/h2&gt;
&lt;p&gt;概率程序的符号化推理：通过符号化决策过程对概率程序的抽象语义进行推理。&lt;/p&gt;
&lt;p&gt;使用符号化执行和解空间大小计算的方法根据有限的执行路径获得整个程序的属性。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Fri, 27 Oct 2017 19:29:33 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-10-27:/probablistic-program-analysis.html</guid></item><item><title>CPS异常检测-形式化方法</title><link>http://shangfute.github.com/CPS-Anomaly-Detection.html</link><description>&lt;p&gt;假设控制算法和估计算法的设计者十分了解物理系统，并且假设物理系统是线性系统。&lt;/p&gt;
&lt;p&gt;但是，现在的CPS越来越复杂，并且存在人的影响，其行为很难预测，这些假设不一定成立。&lt;/p&gt;
&lt;p&gt;CPS的复杂性
人的复杂性建模 － 航管员
从数据中推理出能够区分想要的和不想要的行为的STL公式。 公式可以指示出每个行为集合可能的原因。 使用鲁棒度的概念在这个行为集合上进行有向搜索。&lt;/p&gt;
&lt;p&gt;研究新的算法从数据中学习出STL规格，而STL规格可以使用自然语言解释。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sun, 17 Sep 2017 19:29:33 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-09-17:/CPS-Anomaly-Detection.html</guid><category>Signal Temporal Logic</category><category>Anomaly Detection</category></item><item><title>认知论</title><link>http://shangfute.github.com/recognition.html</link><description>&lt;p&gt;唯理论：从逻辑假设出发，进行推理。形式化方法。知识表示，逻辑推理，符号主义。无法处理不确定性。&lt;/p&gt;
&lt;p&gt;经验论：从经验数据中总结公式。机器学习，深度学习。概率，连接主义。黑盒，不知道根据那些规则进行推理的，无法验证。&lt;/p&gt;
&lt;p&gt;但是机器学习得出的结论，不够理性，无法知道事件之间潜在因果关系。不知道我是否知道，也不知道我是否不知道。我们如何知道我知道，如何知道我们不知道什么。深度学习需要大量训练数据才能工作，但人类只需要少量的sample就可以学到大量知识。&lt;/p&gt;
&lt;p&gt;对概率推理进行建模。因为现在的CPS模型和攻击者模型十分复杂，难以使用数学公式进行建模。特别是对人（控制员和攻击者）的认知模型进行建模。&lt;/p&gt;
&lt;p&gt;混合自动机的可达性分析：已知系统模型和规格的验证问题&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 14 Sep 2017 19:29:33 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-09-14:/recognition.html</guid></item><item><title>几点关于CPS加密的初步想法</title><link>http://shangfute.github.com/cps-enc.html</link><description>&lt;p&gt;现在的CPS传感器和激励器一般没有加密，因而容易产生各种完整性攻击方式。而直接加密的话，对计算性能要求较高，有没有一种半加密的方式，满足两者的要求。&lt;/p&gt;
&lt;p&gt;基于格理论的密码学与随机性有关，是否可以与实际物理系统关联起来，利用物理系统的随机性？&lt;/p&gt;
&lt;p&gt;根据CPS的随机性分布，建立满足随机性的程序分析方法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Tue, 21 Mar 2017 22:01:49 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-03-21:/cps-enc.html</guid><category>cps</category><category>crypto</category></item><item><title>CPS 安全综述</title><link>http://shangfute.github.com/cps-security.html</link><description>&lt;p&gt;本文是对&lt;code&gt;Cyber-Physical Systems Security: a Systematic Mapping Study&lt;/code&gt;的学习笔记。&lt;/p&gt;
&lt;h2&gt;0. 引言&lt;/h2&gt;
&lt;p&gt;Cyber-physical systems (CPS) 是完成&lt;strong&gt;计算、通信、控制&lt;/strong&gt;的软硬件的无缝集成，与物理组件联合设计。由控制器、传感器、激励器三大组件构成。在2006年左右提出。&lt;/p&gt;
&lt;p&gt;CPS的应用领域包括：可信医疗设备、生活助理、交通管控、能源保护、环境控制、航空、关键基础设施（电力、水资源、通信系统等）、制造业、智慧建筑等。可以预见CPS的发展将使20世纪的IT技术革命相形见绌。&lt;/p&gt;
&lt;p&gt;CPS与传统IT系统的区别：CPS是资源受限的实时系统。&lt;/p&gt;
&lt;p&gt;毫无疑问这些系统的&lt;strong&gt;安全性(security)&lt;/strong&gt;是需要考虑的主要因素。环境的不确定性、安全攻击、物理设备的故障都可能导致安全问题。&lt;/p&gt;
&lt;p&gt;给定CPS中使用的&lt;strong&gt;估计和控制算法&lt;/strong&gt;，设计要满足的 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 23 Feb 2017 09:25:08 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-02-23:/cps-security.html</guid><category>cps</category><category>security</category></item><item><title>新学期计划</title><link>http://shangfute.github.com/first-term-plan.html</link><description>&lt;ol&gt;
&lt;li&gt;找研究方向&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;读大量文章，回答下面问题：&lt;/p&gt;
&lt;p&gt;目前都有哪些研究团体在做CPS安全？&lt;/p&gt;
&lt;p&gt;他们都在做什么问题，哪些更有意义？尽可能多读，不只论文。&lt;/p&gt;
&lt;p&gt;哪些问题是刚出现的，没有很好的解决方案？或者解决方案较少的问题？&lt;/p&gt;
&lt;p&gt;还有没有什么我可以做的，如何从新的角度探索这个问题？&lt;/p&gt;
&lt;p&gt;利用自己的优势：编程？理论？算法？机器学习？&lt;/p&gt;
&lt;p&gt;每次看论文时，考虑如果我来做这个问题，我会怎么做？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Fri, 17 Feb 2017 08:52:07 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2017-02-17:/first-term-plan.html</guid><category>plan</category></item><item><title>Git deploy</title><link>http://shangfute.github.com/git-ssh-deploy.html</link><description>&lt;p&gt;Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。 github的SSH配置如下： &lt;/p&gt;
&lt;h2&gt;一 、 设置Git的user name和email：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shangfute&amp;quot;&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shangfute@163.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;二、生成SSH密钥过程：&lt;/h2&gt;
&lt;p&gt;1.查看是否已经有了ssh密钥：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/.ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果没有密钥则不会有此文件夹，有则备份删除 &lt;/p&gt;
&lt;p&gt;2.生成密钥： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;shangfute&lt;/span&gt;&lt;span class="mf"&gt;@163.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;

&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;identification&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;shangfute&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Your …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sun, 26 Jun 2016 23:33:07 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-06-26:/git-ssh-deploy.html</guid><category>web</category><category>learn</category></item><item><title>Learn Haskell</title><link>http://shangfute.github.com/haskell.html</link><description>&lt;p&gt;I found an interesting tuturial of Haskell programming language today, and had fun with the magic features of functional programming, lazy evaluation, type system and pattern matching. They are very different from the instructive programming language and very expressive. I want to learn more about how to translate them into …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 26 May 2016 23:33:07 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-26:/haskell.html</guid><category>functioanl programming</category><category>haskell</category></item><item><title>并行架构</title><link>http://shangfute.github.com/parallel-architechture.html</link><description>&lt;p&gt;并行架构分为位级并行、指令级并行、数据级并行以及任务级并行。&lt;/p&gt;
&lt;p&gt;我比较关注任务级并行，也就是我们平时常说的多处理器架构。对于多处理器架构还分为两种模型：共享内存模型和分布式内存模型。&lt;/p&gt;
&lt;p&gt;共享内存模型的多处理器架构依靠共享的内存进行通信，其效率一般比较高。而分布式内存模型中每个处理器都有一个本地内存，依靠网络进行通信，效率较低，但是更容易并行化。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Tue, 24 May 2016 22:57:17 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-24:/parallel-architechture.html</guid><category>parallization</category></item><item><title>我的时间管理方案</title><link>http://shangfute.github.com/time-managemnet.html</link><description>&lt;p&gt;今天和显哥讨论他的备忘录应用的开发计划时，谈起了利用手机辅助管理自己的日常生活的话题。&lt;/p&gt;
&lt;p&gt;现在，时间管理的方案层出不穷，GTD、番茄时间管理方法、时间记录方法，各有各的优点。但是最适合自己的才是最好的。因此有人想开发自己的方案，比如显哥，有人组合使用现有的工具，比如我。&lt;/p&gt;
&lt;p&gt;其实我的时间超级空闲，没有忙到不可开交，但是经常出现拖延的情况。我必须保证自己时刻想着下一步方向。&lt;/p&gt;
&lt;p&gt;随时整理想法，记录到奇妙清单中。&lt;/p&gt;
&lt;p&gt;思考如何分解任务能够有效完成任务。&lt;/p&gt;
&lt;p&gt;然后将具体化的任务加入到TODO列表中。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Tue, 24 May 2016 22:57:17 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-24:/time-managemnet.html</guid><category>GTD</category><category>time</category></item><item><title>并发与并行</title><link>http://shangfute.github.com/concurrency-parallization.html</link><description>&lt;p&gt;目前，计算机几乎无法离开并行计算的能力，同时编程中还有一个并发的概念。并发与并行看起来都是同时做某事，但实际上存在区别。&lt;/p&gt;
&lt;p&gt;并发指能够同时应对多个任务。并行指同时做多个任务的能力。区别在于一个是“应对”，一个是“做”。“应对”针对问题定义层面，“做”针对解决方法层面。比如，我们可以边看电视边烧饭，同时面临两个任务，是并发。同样可以再请别人帮忙一起做饭，同时解决问题，是并行。&lt;/p&gt;
&lt;p&gt;因此，并发不一定并行解决，并行同样不一定针对并发问题。并发任务在解决时可以按顺序逐一解决，当然也可以同时解决。并行也可以解决非并发的问题，提高计算效率。不过并行能够起作用一定是针对的问题可以转化为并发问题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Mon, 23 May 2016 23:17:23 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-23:/concurrency-parallization.html</guid><category>parallization</category><category>cocurrency</category></item><item><title>[Encrypted] Tangled Thoughts</title><link>http://shangfute.github.com/tangled-thoughts.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sun, 22 May 2016 22:20:39 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-22:/tangled-thoughts.html</guid></item><item><title>百鸟朝凤</title><link>http://shangfute.github.com/phoenix-song.html</link><description>&lt;p&gt;听耀哥说《百鸟朝凤》不错，今天看了之后很多感想。电影反映了唢呐艺术的衰落和唢呐匠的抗争。在电影中，百鸟朝凤是一首唢呐曲名，只有德高望重的人的丧礼上才能演奏，代表了最高等级的哀荣。主人公最后在师傅的墓前吹了这支曲子，让人不由感慨传统艺术就像师傅一样渐渐离我们远去。&lt;/p&gt;
&lt;p&gt;凤凰不论是在东方还是在西方，总是让人与浴火重生联系起来。我们不禁想探索一下唢呐这样的传统艺术能否重新焕发生机。人们都说曲高和寡，本来唢呐就不算什么高雅的艺术，而大都吹一些人民群众喜闻乐见的小曲儿。但为什么如今竞争不过现在的流行音乐呢？我不知道，毕竟咱既不是搞音乐的，也不懂唢呐。&lt;/p&gt;
&lt;p&gt;但类比一下其他的领域，我们会发现许多问题。比如现在很多岗位正在被计算机、机器人取代。它们大都是一些重复性高、缺乏技术含量的岗位。而唢呐作为有很高复杂度、难以被取代的工作都面临消亡的风险。那么我们现在的工作会不会同样面临这样的一天呢？难以想象十年后，我们失去工作，又难以学习新的技能时，将如何继续生存。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sat, 21 May 2016 21:58:27 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-21:/phoenix-song.html</guid><category>movie</category></item><item><title>蓝牙共享网络</title><link>http://shangfute.github.com/bluetooth-network.html</link><description>&lt;p&gt;我们一般通过手机让电脑上网的方式都是通过在手机上建立Wi-Fi热点的方式进行，今天学习了另一种方式，通过蓝牙建立共享网络。&lt;/p&gt;
&lt;p&gt;设置很简单，手机和电脑配对后，手机上建立蓝牙共享网络，电脑上加入蓝牙网络即可。&lt;/p&gt;
&lt;p&gt;这样不需要建热点也能上网了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Fri, 20 May 2016 13:51:55 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-20:/bluetooth-network.html</guid><category>skill</category><category>bluetooth</category></item><item><title></title><link>http://shangfute.github.com/best-coder-ctf.html</link><description>&lt;p&gt;之前耀哥问我要不要参加百度之星编程竞赛，其实有一点要参加的想法。但是一方面感觉自己水平太差，那不了什么名次；另一方面还想着时间不够，我其实更想参加CTF。&lt;/p&gt;
&lt;p&gt;其实现在各种竞赛这么多，还有Kaggle、天池什么的都很诱人。但是毕竟人的精力是有限的。我现在希望能够首先集中精力到CTF中。&lt;/p&gt;
&lt;p&gt;想到这里，发现其实我同样没有参加多少CTF，那么何谈精力有限呢。那么我很少参加编程竞赛和很少参加CTF的原因是否其实一样呢。&lt;/p&gt;
&lt;p&gt;那么做个实验吧，下周我要尝试参加所有能够参加的CTF。如果做到了，那么坚持参加CTF。如果没有做到说明，我不能参加竞赛另有原因。我应当尝试找出更深入的原因。&lt;/p&gt;
&lt;p&gt;captf.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 19 May 2016 11:01:49 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-19:/best-coder-ctf.html</guid><category>game</category><category>learn</category></item><item><title>互联网发展太快了，是时候给它加把锁了</title><link>http://shangfute.github.com/internet-lock.html</link><description>&lt;p&gt;互联网现在真正的改变了人们的生活，其中一项就是我们的隐私。如果将公交卡和银行卡绑定，元数据的关联几乎就可以确定一个人去了那里，干了什么，进而重构出一个人完整的生活轨迹。有人认为在互联网时代，我们不需要隐私，一切都开诚布公。同样有人竭力去保护隐私，甚至拒绝使用智能手机。&lt;/p&gt;
&lt;p&gt;这让我想起《三体》：三体人之间通过意识交流，不会产生任何谎言。这看起来是不错的天赋，但是他们大概就没有隐私了吧。假设互联网的发展能够使得人类同样达到三体人的状态，所有人完全成为一个共同体，那么人的思想就会同质化。其实正是隐私——人们之间不同又保密的那部分——构造了我们多元的社会。在我们的社会中会存在冲突，但是这样的社会才是有活力的社会，有创造力的社会。&lt;/p&gt;
&lt;p&gt;但实际上隐私的概念又十分微妙。只要上网必然要向网络提供自己的信息，才能获得相应的服务。因此，现在的手机应用的授权管理让人难以理解。比如一个应用需要你授权它调用GPS，但是我不希望泄漏我的位置信息，所以我选不授权，应用退出。应用为什么不可以保持位置未知的情况下提供服务呢？另一方面，我告诉了应用我的位置，我希望它合理使用，不要再用作它途。但是数据已经上传到服务器上了，应用想怎么用，我就没法控制了。我希望即使数据离开我的计算机，仍然只有授权的计算可以在我的数据上运行。&lt;/p&gt;
&lt;p&gt;其实现在已经有人实现了保密搜索功能：提供给搜索引擎的关键字是加密的，搜索引擎在不知道搜索内容的情况下，同样能够得到正确结果。这就很好的保护了用户的隐私 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Wed, 18 May 2016 23:01:00 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-18:/internet-lock.html</guid><category>internet</category><category>privacy</category></item><item><title>攻击者模型</title><link>http://shangfute.github.com/rational-concept.html</link><description>&lt;p&gt;在安全协议中经典的攻击者模型有半诚实模型、恶意模型。半诚实的攻击者完全遵照游戏准则，但总是尝试打破既定的安全目标，就好像伪君子。恶意攻击者完全不管协议的规定，同样总是尝试打破既定的安全目标，就好像真小人。&lt;/p&gt;
&lt;p&gt;但实际中更可能的情况是攻击者是理性的人，会按照效益来决定是否打破规则。如果惩罚严厉的话，就不会选择打破规则。完全防御恶意攻击者十分困难，需要消耗很高的代价，但是如果防御理性攻击者，就不需要很高的代价了。这时候密码学就难以解决了，需要引入博弈论的方法。&lt;/p&gt;
&lt;p&gt;如果要提高效率的话，通常的情况是发现那些事情其实不是必须做的，只做必要的事情就好了。在安全计算协议中，混淆电路和不经意传输花费比较大。如果有些计算不需要保密的话，可以不进行混淆。将每条要执行的语句按照保密的程度进行分类，只对保密的计算使用混淆电路。同样如果数据有不经意访问性，也可以省略不经意传输的花销。这要比普通的方案有效得多。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Tue, 17 May 2016 22:51:22 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-17:/rational-concept.html</guid><category>attack model</category><category>game theory</category></item><item><title>非凡的推断</title><link>http://shangfute.github.com/non-trivil-reduction.html</link><description>&lt;p&gt;晚上，X哥与Y哥对弈象棋，Y哥再次败北。原因出于哪里呢？大概是Y哥为了保护小卒子而失了大局，之前也犯过同样的错误。但是X哥给出了一个非凡的判断：看来下棋真的能反映一个人的性格；Y哥总是为了保护小卒子而失棋，这反映了Y哥不丢弃任何人，哪怕他是无名小卒。&lt;/p&gt;
&lt;p&gt;X哥，请收下我的膝盖。&lt;/p&gt;
&lt;p&gt;首先，Y哥确实就是这样的人啊。&lt;/p&gt;
&lt;p&gt;其次，X哥完全在思考积极的方面。&lt;/p&gt;
&lt;p&gt;最后，X哥完美地解决了Y哥的尴尬。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Mon, 16 May 2016 23:05:31 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-16:/non-trivil-reduction.html</guid><category>chess</category><category>character</category></item><item><title>形式化协议分析方法</title><link>http://shangfute.github.com/protocol-analysis.html</link><description>&lt;p&gt;今天从CS259学习到一个关于协议分析的学习方法，我取名叫演变法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到一个安全协议的描述文档，例如RFC。&lt;/li&gt;
&lt;li&gt;根据描述，忽略一些协议细节，抽取协议的基本构造。&lt;/li&gt;
&lt;li&gt;将构造形式化。&lt;/li&gt;
&lt;li&gt;分析形式化协议，发现协议漏洞。&lt;/li&gt;
&lt;li&gt;对比描述文档，分析完整协议如何解决该漏洞的。&lt;/li&gt;
&lt;li&gt;打补丁后，重复第3步。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如此从原始构造，演变到最后版本的协议，能够深刻理解协议中的细节描述，分别都是为了解决什么问题的。&lt;/p&gt;
&lt;p&gt;这个方法同样适用于软件的安全性分析。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sun, 15 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-15:/protocol-analysis.html</guid><category>formal method</category><category>protocol analysis</category><category>learn</category></item><item><title>英语学习</title><link>http://shangfute.github.com/learn-english.html</link><description>&lt;p&gt;任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过李夏师兄推荐的欧路词典积累两万单词量，简直太好用了。&lt;/li&gt;
&lt;li&gt;循序渐进地读完21本书。&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Sat, 14 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-14:/learn-english.html</guid><category>english</category><category>daily</category><category>learn</category></item><item><title>Have Fun With Cryptography</title><link>http://shangfute.github.com/practice-encrypt.html</link><description>&lt;p&gt;今天刚刚在 github 上创建了主页，一共才三篇文章，就有一篇是加密的，遭到朋友们的抱怨。其实文章仅仅是一些没有整理好的思想罢了，但是为了测试一下加密功能，因此才加密了一下。另外，这个网站的主题就是密码学，因此我十分乐意让这个主题更突出一些。&lt;/p&gt;
&lt;p&gt;密码学太有用了，我不想只从理论研究的角度学习密码学，更想将其应用到实践中去。我希望能够实现下面的应用。&lt;/p&gt;
&lt;h2&gt;安全的评论&lt;/h2&gt;
&lt;p&gt;相信本文读者都在使用各种各样的网络应用，这些网络应用大多存在于云服务器上，客户端通常就是一个浏览器。大公司还可以构建自己的云，但许多小型组织和个人还是在租用公有云，因此数据存储在别人的计算机上。比如，大家使用淘宝时，交易记录都是存储在淘宝服务器上的，你可以查找之前在淘宝上买过的所以东西。这样做有很多好处，但同样难以保证这些数据的完整性，不被恶意修改。另一方面，难以保证这些数据不被用作它途，被恶意数据挖掘等等。&lt;/p&gt;
&lt;p&gt;比如文章评论功能可以自己实现，也可以将该项工作外包给别人。本站点的评论功能使用了多说的社会化评论服务，评论的数据以明文的形式存储在多说的服务器上。每次访问网站时，浏览器向多说的服务器发送请求，获得评论。因此难以确保这些外包的数据有没有被修改。这时候评论数据不需要保密，但是应当保证不被修改。&lt;/p&gt;
&lt;p&gt;一项工作有多少实际价值，就看它能帮助什么人，解决什么问题。帮助的人越多，解决的问题越普遍，越重要，价值越大 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Fri, 13 May 2016 22:11:03 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-13:/practice-encrypt.html</guid><category>web</category><category>crypto</category><category>cloud</category></item><item><title>[Encrypted] 考博之后的思考</title><link>http://shangfute.github.com/after-submission.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-12:/after-submission.html</guid><category>thoughts</category></item><item><title>[Encrypted] Think Flow</title><link>http://shangfute.github.com/think-flow.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 15:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-12:/think-flow.html</guid><category>thoughts</category></item><item><title>第一篇文章</title><link>http://shangfute.github.com/di-yi-pian-wen-zhang.html</link><description>&lt;h2&gt;记录博客搭建过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;pelican安装&lt;/li&gt;
&lt;li&gt;github pages&lt;/li&gt;
&lt;li&gt;pelican 插件&lt;/li&gt;
&lt;li&gt;select themes&lt;ul&gt;
&lt;li&gt;bootstrap2-dark&lt;/li&gt;
&lt;li&gt;aboutwilson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加评论功能 Duoshuo&lt;/li&gt;
&lt;li&gt;站点图 sitemap&lt;/li&gt;
&lt;li&gt;RSS订阅&lt;/li&gt;
&lt;li&gt;文章加密&lt;/li&gt;
&lt;li&gt;日常写作流程&lt;/li&gt;
&lt;li&gt;图床&lt;/li&gt;
&lt;li&gt;代码高亮显示&lt;/li&gt;
&lt;li&gt;公式 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican_plugins&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;encrypt_content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_math&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;尚福特&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">尚福特</dc:creator><pubDate>Thu, 12 May 2016 13:37:57 +0800</pubDate><guid isPermaLink="false">tag:shangfute.github.com,2016-05-12:/di-yi-pian-wen-zhang.html</guid><category>write</category><category>think</category></item></channel></rss>