<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shangfute's Blog</title><link href="http://shangfute.github.com/" rel="alternate"></link><link href="http://shangfute.github.com/feeds/life.atom.xml" rel="self"></link><id>http://shangfute.github.com/</id><updated>2016-05-16T23:05:31+08:00</updated><entry><title>非凡的推断</title><link href="http://shangfute.github.com/non-trivil-reduction.html" rel="alternate"></link><published>2016-05-16T23:05:31+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-16:non-trivil-reduction.html</id><summary type="html">&lt;p&gt;晚上，X哥与Y哥对弈象棋，Y哥再次败北。原因出于哪里呢？大概是Y哥为了保护小卒子而失了大局，之前也犯过同样的错误。但是X哥给出了一个非凡的判断：看来下棋真的能反映一个人的性格；Y哥总是为了保护小卒子而失棋，这反映了Y哥不丢弃任何人，哪怕他是无名小卒。&lt;/p&gt;
&lt;p&gt;X哥，请收下我的膝盖。&lt;/p&gt;
&lt;p&gt;首先，Y哥确实就是这样的人啊。&lt;/p&gt;
&lt;p&gt;其次，X哥完全在思考积极的方面。&lt;/p&gt;
&lt;p&gt;最后，X哥完美地解决了Y哥的尴尬。&lt;/p&gt;</summary><category term="chess"></category><category term="character"></category></entry><entry><title>英语学习</title><link href="http://shangfute.github.com/learn-english.html" rel="alternate"></link><published>2016-05-14T15:37:57+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-14:learn-english.html</id><summary type="html">&lt;p&gt;任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过李夏师兄推荐的欧路词典积累两万单词量，简直太好用了。&lt;/li&gt;
&lt;li&gt;循序渐进地读完21本书。&lt;/li&gt;
&lt;/ol&gt;</summary><category term="english"></category><category term="daily"></category><category term="learn"></category></entry><entry><title>[Encrypted] Think flow</title><link href="http://shangfute.github.com/think-flow.html" rel="alternate"></link><published>2016-05-12T15:37:57+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-12:think-flow.html</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;kBQyvuz+7yL9SzesgTFdXg==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</summary><category term="thoughts"></category></entry></feed>