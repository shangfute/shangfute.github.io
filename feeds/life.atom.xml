<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shangfute's Blog</title><link href="http://shangfute.github.com/" rel="alternate"></link><link href="http://shangfute.github.com/feeds/life.atom.xml" rel="self"></link><id>http://shangfute.github.com/</id><updated>2016-05-16T23:05:31+08:00</updated><entry><title>非凡的推断</title><link href="http://shangfute.github.com/non-trivil-reduction.html" rel="alternate"></link><published>2016-05-16T23:05:31+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-16:non-trivil-reduction.html</id><summary type="html">&lt;p&gt;晚上，X哥与Y哥对弈象棋，Y哥再次败北。原因出于哪里呢？大概是Y哥为了保护小卒子而失了大局，之前也犯过同样的错误。但是X哥给出了一个非凡的判断：看来下棋真的能反映一个人的性格；Y哥总是为了保护小卒子而失棋，这反映了Y哥不丢弃任何人，哪怕他是无名小卒。&lt;/p&gt;
&lt;p&gt;X哥，请收下我的膝盖。&lt;/p&gt;
&lt;p&gt;首先，Y哥确实就是这样的人啊。&lt;/p&gt;
&lt;p&gt;其次，X哥完全在思考积极的方面。&lt;/p&gt;
&lt;p&gt;最后，X哥完美地解决了Y哥的尴尬。&lt;/p&gt;</summary><category term="chess"></category><category term="character"></category></entry><entry><title>英语学习</title><link href="http://shangfute.github.com/learn-english.html" rel="alternate"></link><published>2016-05-14T15:37:57+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-14:learn-english.html</id><summary type="html">&lt;p&gt;任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过李夏师兄推荐的欧路词典积累两万单词量，简直太好用了。&lt;/li&gt;
&lt;li&gt;循序渐进地读完21本书。&lt;/li&gt;
&lt;/ol&gt;</summary><category term="english"></category><category term="daily"></category><category term="learn"></category></entry><entry><title>[Encrypted] Think flow</title><link href="http://shangfute.github.com/think-flow.html" rel="alternate"></link><published>2016-05-12T15:37:57+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-12:think-flow.html</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;2xkgJAX2xFeMMu0Pbfxtvw==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</summary><category term="thoughts"></category></entry></feed>