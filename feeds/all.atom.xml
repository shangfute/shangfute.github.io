<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shangfute's Blog</title><link href="http://shangfute.github.com/" rel="alternate"></link><link href="http://shangfute.github.com/feeds/all.atom.xml" rel="self"></link><id>http://shangfute.github.com/</id><updated>2016-05-12T22:11:03+08:00</updated><entry><title>新增rss订阅功能</title><link href="http://shangfute.github.com/create-rss.html" rel="alternate"></link><published>2016-05-12T22:11:03+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-12:create-rss.html</id><summary type="html"></summary><category term="web"></category><category term="rss"></category><category term="feed"></category></entry><entry><title>第一篇文章</title><link href="http://shangfute.github.com/di-yi-pian-wen-zhang.html" rel="alternate"></link><published>2016-05-12T13:37:57+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-12:di-yi-pian-wen-zhang.html</id><summary type="html">&lt;h2&gt;记录博客搭建过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;pelican安装&lt;/li&gt;
&lt;li&gt;github pages&lt;/li&gt;
&lt;li&gt;pelican 插件&lt;/li&gt;
&lt;li&gt;select themes&lt;ul&gt;
&lt;li&gt;bootstrap2-dark&lt;/li&gt;
&lt;li&gt;aboutwilson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加评论 Disqus&lt;/li&gt;
&lt;li&gt;站点图 sitemap&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;下一步改进&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;RSS&lt;/li&gt;
&lt;li&gt;加密&lt;/li&gt;
&lt;li&gt;日常写作流程&lt;/li&gt;
&lt;li&gt;图床&lt;/li&gt;
&lt;/ol&gt;</summary><category term="write"></category><category term="think"></category></entry><entry><title>[Encrypted] Think flow</title><link href="http://shangfute.github.com/think-flow.html" rel="alternate"></link><published>2016-04-06T09:37:44+08:00</published><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-04-06:think-flow.html</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;ryjHnUFsih+CF73y14HJRA==;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;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</summary><category term="thought"></category><category term="daily"></category></entry></feed>